@page "/updateticket/{id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]
@using TicketManager.Shared.DtoModels;
@using TinyMCE.Blazor
@inject ITicketsService ticketsService;

<h3>Update the Ticket</h3>
<div class="">
    <div class="">
        <EditForm Model="Model" OnValidSubmit="Update">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3 ml-3 mr-3 mt-3">
                <label for="@Model.Title" class="form-label">Title</label>
                <InputText class="form-control" @bind-Value="Model.Title" />
            </div>
            <div class="mb-3 ml-3 mr-3 mt-3">
                <label for="@Model.Content" class="form-label">Content</label>
                <Editor Field="() => Model.Content" Conf="@editorConf" @bind-Value="Model.Content" />
            </div>
            <div class="mb-3 ml-3 mr-3 mt-3">
                <label for="@Model.Audience" class="form-label">Select your audiance</label>
                <InputSelect class="form-control" @bind-Value="Model.Audience">
                    <option value="Me">Me</option>
                    <option value="Everyone">Everyone</option>
                </InputSelect>
            </div>
            <div class="mb-3 ml-3 mr-3 mt-3">
                <label for="@Model.ReceiverId" class="form-label">Select support</label>
                <InputSelect class="form-control" @bind-Value="Model.ReceiverId">
                    <option value="4">Office support</option>
                    <option value="5">Technical support</option>
                </InputSelect>
            </div>
            <button class="btn btn-success btn-lg ml-4" type="submit">Update Ticket</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    public CreateTicketModel Model { get; set; } = new CreateTicketModel();
    private Dictionary<string, object> editorConf;
    protected override async Task OnInitializedAsync()
    {
        Model = await ticketsService.GetTicketToUpdate(Id);
        editorConf = new Dictionary<string, object>{
   { "menubar", true },
   { "plugins", "link image code" },
   { "toolbar", "undo redo | styleselect | forecolor | bold italic | alignleft aligncenter alignright alignjustify | outdent indent | link image | code" }
 };
    }

    private async Task Update()
    {
        await ticketsService.UpdateTicket(Model, Id);
        Navigation.NavigateTo("/");
    }
}
